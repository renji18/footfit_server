generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Type {
  USER
  ADMIN
  VENDOR
}

model Auth {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String?  @unique @db.ObjectId
  User         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  password     String
  type         Type
  token        Bytes?
  cloudinaryId String?
  isLoggedIn   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  name        String
  number      String
  profilePic  String?
  company     String?
  description String?
  Auth        Auth?
  Cart        Cart?
  Order       Order[]
  Address     Address[]
  Shoes       Shoes[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  home_street String
  city        String
  pincode     String
  state       String
  country     String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  Order       Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Shoes {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String
  description  String?
  image        String
  inStock      Boolean
  quantity     Int
  pricePerUnit Float
  unit         String      @default("USD")
  rating       Float
  CartItem     CartItem[]
  OrderItem    OrderItem[]
  User         User?       @relation(fields: [userId], references: [id])
  userId       String?     @db.ObjectId
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  CartItem  CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique @db.ObjectId
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  Cart      Cart?    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String?  @db.ObjectId
  Shoes     Shoes    @relation(fields: [shoesId], references: [id])
  shoesId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  OrderItem     OrderItem[]
  totalPrice    Int
  orderStatus   String      @default("Payment Pending") // Pending => Placed => Dispatched => Delivered / Cancelled
  paymentStatus String      @default("Pending") // Pending => Complete
  paymentUrl    String?
  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String      @db.ObjectId
  Address       Address?    @relation(fields: [addressId], references: [id])
  addressId     String?     @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Shoes     Shoes    @relation(fields: [shoesId], references: [id])
  shoesId   String   @db.ObjectId
  quantity  Int
  Order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
